name: Deploy laratel.li

on:
  push:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-20.04

    steps:
      - name: Checking out blog
        uses: actions/checkout@v2

      - name: Setting up Node
        uses: actions/setup-node@v1
        with:
          node-version: "16"

      # https://stackoverflow.com/a/59482124
      - name: Set up npmrc
        run: 'echo "$NPMRC" > ~/.npmrc'
        env:
          NPMRC: ${{secrets.NPM_RC}}

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: yarn compiler cache
        uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

        # https://stackoverflow.com/a/62244232 Prefer offline will actually use
        # the yarn cache instead of fetching from the server. This fixes an
        # issue when using the cache where yarn wouldn't be able to find
        # `shadow-cljs`.
      - name: Installing dependencies
        run: yarn --prefer-offline

      - name: shadow-cljs compiler cache
        id: cache-shadow
        uses: actions/cache@v2
        with:
          path: .shadow-cljs
          key: ${{ runner.os }}-shadow-cljs-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-shadow-cljs-

      - name: Maven compiler cache
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Building site
        if: steps.cache-shadow.outputs.cache-hit != 'true'
        run: yarn shadow-cljs release laratelli

      - name: Installing SSH Key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          known_hosts: ${{ secrets.KNOWN_HOSTS }}

      - name: Deploying
        run: "rsync -avz ./public/ $REMOTE_USER@$REMOTE_HOST:$REMOTE_PATH"
        env:
          REMOTE_USER: ${{ secrets.REMOTE_USER }}
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
          REMOTE_PATH: ${{ secrets.REMOTE_PATH }}
